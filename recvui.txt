#ifndef UIIO_H
#define UIIO_H
#include <QWidget>
#include <QLabel>
#include <string>
#include <vector>
#include <QFileDialog>
#include <QDebug>
#include <QListWidget>
#include <QGridLayout>
class ppg:public QWidget
{
public:
    ppg();
private:
    QListWidget * m_list_people,*m_list_files;
    QLabel      * m_label_people,*m_label_files;
    QStringList m_item_people,m_item_files;
    QGridLayout * m_gride;
    std::vector<std::string> m_files;
};



ppg::ppg()
{
  m_list_people = new QListWidget(this);
  m_list_files  = new QListWidget(this);

  m_item_files<<"1"<<"2"<<"3";
  m_item_people<<"4"<<"5"<<"6";

  m_list_people->addItems(m_item_people);
  m_list_files->addItems(m_item_files);

  m_label_people = new QLabel(QString::fromLocal8Bit("在线用户"),this);
  m_label_files= new QLabel(QString::fromLocal8Bit("共享文件"),this);

  m_gride = new QGridLayout(this);
  m_gride->addWidget(m_label_people,0,0,1,1);
  m_gride->addWidget(m_list_people,1,0,1,1);
  m_gride->addWidget(m_label_files,0,1,1,1);
  m_gride->addWidget(m_list_files,1,1,1,1);

  for(QStringList::iterator i = m_item_files.begin();i != m_item_files.end();++i){
  m_item_files.erase(i);
  break;
}

 QString tmp = QFileDialog::getOpenFileName(this);
  qDebug()<<tmp;
}

#endif // UIIO_H
